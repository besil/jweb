{
  "name": "JWeb",
  "tagline": "",
  "body": "# JWeb\r\n\r\nJWeb is a framework for developing and testing easily rest services.\r\nIt is built around [Spark](http://sparkjava.com/),\r\naccording with the [Spark testing guide](https://sparktutorials.github.io/2015/07/30/spark-testing-unit.html)\r\n\r\nThe framework aims to be a library with support for common funcionalities\r\n(such as pojo request mapping, session management),\r\nsimilarly to Django or other common web frameworks.\r\n\r\n\r\n## Installation\r\nPlease clone the repo and include it as maven dependency\r\n``` xml\r\n<dependency>\r\n    <groupId>it.besil.web</groupId>\r\n    <artifactId>jweb</artifactId>\r\n    <version>1.0.0</version>\r\n</dependency>\r\n```\r\n\r\n## Quickstart\r\nWe will create a simple Echo Rest Server, with unit testing. Full code [here](https://github.com/besil/jwebsample).\r\n\r\nIn JWeb, there are a very few concepts to remember: an **App** is the main block of your application. An App\r\nincapsulates one or more **Controllers** and **Filters**.\r\n\r\n**Controllers** defines the business logic for a resource. A Controller is made of 3 elements:\r\n\r\n1. A _path_, which is the resource url exposed by the server\r\n\r\n2. A _method_ (ie GET, POST, ...) for the resource\r\n\r\n3. A _handler_, which contains the business logic associated to the specific resource for that method\r\n\r\nAn **handler** consumes a **Payload** and produce an **Answer**, according to the business logic.\r\n\r\n**Payloads** are user defined POJO, which extracts parameters from http requests.\r\n**Answers** are simple objects with a status code and a map of key-values to return.\r\n\r\n**Filters** are very similar to handlers, but they are executed _before_ or _after_ each request/response.\r\n\r\nEnough reading, let's see some code\r\n\r\nThis is your main:\r\n``` java\r\npublic static void main(String[] args) throws IOException {\r\n    JWebConfiguration conf = new JWebConfiguration();\r\n    JWebServer jweb = new JWebServer(conf);\r\n    jweb.addApp(new EchoApp());\r\n    // You can add here as many apps as you want\r\n}\r\n```\r\n\r\nThe EchoApp is (about 60 lines of code, 3 classes):\r\n``` java\r\npublic class EchoApp extends JWebApp {\r\n    public static class EchoPayload implements Payload {\r\n        private String message;\r\n\r\n        public EchoPayload() {\r\n\r\n        }\r\n\r\n        public void init(Request req) {\r\n            this.message = req.queryParams(\"message\");\r\n        }\r\n\r\n        public String getMessage() {\r\n            return message;\r\n        }\r\n    }\r\n\r\n    public static class GetEchoHandler extends JWebHandler<EchoPayload> {\r\n        public GetEchoHandler() {\r\n            super(EchoPayload.class);\r\n        }\r\n\r\n        @Override\r\n        public Answer process(EchoPayload ep) {\r\n            return new SuccessAnswer(\"message\", \"Echo: \" + ep.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n        public List<? extends JWebController> getControllers() {\r\n            // Every app can be made by different controllers.\r\n            // Each controller must specify\r\n            // the method, the path where to bind and the handler\r\n            return Arrays.asList(new JWebController() {\r\n                public HttpMethod getMethod() {\r\n                    return HttpMethod.get;\r\n                }\r\n\r\n                public JWebHandler getHandler() {\r\n                    return new GetEchoHandler();\r\n                }\r\n\r\n                public String getPath() {\r\n                    return \"/api/echo\";\r\n                }\r\n            });\r\n        }\r\n}\r\n```\r\n\r\nRun it, and open [localhost](http://localhost:4567/api/echo?message=hello). You will see your message echoed back.\r\n\r\nAbout **testing**, I found useful testing web services like this:\r\n``` java\r\npublic class EchoTest extends AbstractBehaviouralTest {\r\n    @Before\r\n    public void init() {\r\n        this.addApp(new EchoApp());\r\n    }\r\n\r\n    @Test\r\n    public void simpleTest() throws UnirestException {\r\n        HttpResponse<JsonNode> resp = Unirest.get(getUrl(\"/api/echo\"))\r\n                .queryString(\"message\", \"ciao\")\r\n                .asJson();\r\n        Assert.assertEquals(\"Echo: ciao\",\r\n            resp.getBody().getObject().getString(\"message\"));\r\n    }\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}